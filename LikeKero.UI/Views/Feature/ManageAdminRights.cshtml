@model List<RoleFeatureResponseVM>
@using LikeKero.UI.ViewModels.Response;

@{
    ViewData["Title"] = "Manage Admin Rights";
    Layout = "~/Views/Shared/_Layout.cshtml";

    string LastModifiedDate = "";
    if (Model.Count > 0)
    {
        DateTime? lDate = Model[0].LastModifiedDate;
        LastModifiedDate = lDate == null ? "" : "Last Updated On " + CommonMethods.GetDateWithTime(lDate, false);
    }
}

<script src="~/js/jquery.btnswitch.min.js"></script>
<link href="~/css/jquery.btnswitch.min.css" rel="stylesheet" />

<style>
    .table tbody tr td {
        padding: 5px 5px;
    }

        .table tbody tr td .fa {
            font-size: 11px;
        }
</style>
<div class="conHeader">
    <div class="row">
        <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12">
            <div class="pull-left">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item active" aria-current="page">Configure Admin Rights</li>
                </ol>
            </div>
            <div class="pull-right mob-w100">
                <ul class="headerListing">
                    <li class="mob-pl-0">
                        <div class="form-group lastUpdate">@LastModifiedDate</div>
                    </li>
                    <li class="mo-floatright">
                        <div class="form-group">
                            <input type="hidden" id="MViewEdit" value="false" />
                            <span class="activeText">View</span>
                            <div id="btnSwitchViewEdit" class="switchbutton"></div>
                            <span class="inactiveText">Edit</span>
                        </div>
                    </li>
                </ul>
            </div>
        </div>
    </div>
</div>

<div class="chkTBL">
    <div class="catlogHT mobileheadflicker">
        <table id="mydatatable" class="table">
            <thead>
                <tr class="uppercaseText">
                    <th>Default Privilege</th>
                    @for (int i = 0; i < 3; i++)
                    {
                        <th class="text-center">@Model[i].DisplayRole</th>
                    }
                </tr>
            </thead>
            <tbody>
                @{
                    List<RoleFeatureResponseVM> parentFeatures = Model.Where(x => x.ParentFeatureId == null).ToList();
                    int FeatureCount = 0, totalFeatures = parentFeatures.Count() / 3, RoleCount = 0;
                    for (FeatureCount = 0; FeatureCount < totalFeatures; FeatureCount++)
                    {
                        <tr class="bgTRGrey">
                            @*Feature Column*@
                            <td><strong>@parentFeatures[RoleCount].FeatureName</strong></td>
                            @for (int j = 0; j < 3; j++, RoleCount++)
                            {
                                string cls = parentFeatures[RoleCount].RoleId + "_" + parentFeatures[RoleCount].FeatureId;
                                string disChkClass = "", disEmptyClass = "";
                                <td class="text-center">
                                    <div class="toggleView">
                                        @if (parentFeatures[RoleCount].Status)
                                        {
                                            disChkClass = "";
                                            disEmptyClass = "displayNone";
                                        }
                                        else
                                        {
                                            disChkClass = "displayNone";
                                            disEmptyClass = "";
                                        }
                                        <span class="@cls @disChkClass"><i class="fa fa-check"></i></span>
                                        <span class="@cls @disEmptyClass"></span>
                                    </div>
                                    <div style="display:none" class="toggleEdit">@Html.CheckBox("Status", parentFeatures[RoleCount].Status, new { @class = "chkStatus", @roleId = parentFeatures[RoleCount].RoleId, @featureId = parentFeatures[RoleCount].FeatureId, @id = parentFeatures[RoleCount].RoleId + "_" + parentFeatures[RoleCount].FeatureId })</div>
                                </td>
                            }
                        </tr>

                        //child feature
                        List<RoleFeatureResponseVM> childFeatures = Model.Where(x => x.ParentFeatureId == parentFeatures[RoleCount - 1].FeatureId).ToList();

                        int childFeatureCount = 0, childtotalFeatures = childFeatures.Count() / 3, childRoleCount = 0;
                        for (childFeatureCount = 0; childFeatureCount < childtotalFeatures; childFeatureCount++)
                        {
                            <tr>
                                @*child Feature Column*@
                                <td><span class="leftpadding"> @childFeatures[childRoleCount].FeatureName </span></td>
                                @for (int k = 0; k < 3; k++, childRoleCount++)
                                {
                                    string childcls = childFeatures[childRoleCount].RoleId + "_" + childFeatures[childRoleCount].FeatureId;
                                    string disChildChkClass = "", disChildEmptyClass = "";
                                    <td class="text-center">
                                        <div class="toggleView">
                                            @if (childFeatures[childRoleCount].Status)
                                            {
                                                disChildChkClass = "";
                                                disChildEmptyClass = "displayNone";
                                            }
                                            else
                                            {
                                                disChildChkClass = "displayNone";
                                                disChildEmptyClass = "";
                                            }
                                            <span class="@childcls @disChildChkClass"><i class="fa fa-check"></i></span>
                                            <span class="@childcls @disChildEmptyClass"></span>
                                        </div>
                                        <div style="display:none" class="toggleEdit">@Html.CheckBox("Status", childFeatures[childRoleCount].Status, new { @class = "chkStatus " + "chk_" + childFeatures[childRoleCount].RoleId + "_" + childFeatures[childRoleCount].ParentFeatureId, @roleId = childFeatures[childRoleCount].RoleId, @featureId = childFeatures[childRoleCount].FeatureId, @parentFeatureId = childFeatures[childRoleCount].ParentFeatureId })</div>
                                    </td>
                                }
                            </tr>
                        }
                    }
                }
            </tbody>
        </table>
    </div>
</div>

<script type="text/javascript">
    function switchViewEdit() {
        $('#btnSwitchViewEdit').btnSwitch({
            Theme: 'iOS',
            HiddenInputId: 'MViewEdit',
            ToggleState: $("#MViewEdit").val().toLowerCase() == "true" ? true : false,
            OnCallback: function () { /*On Edit*/ $(".toggleView,.toggleEdit").toggle(); },
            OffCallback: function () { /*Off view*/ $(".toggleView,.toggleEdit").toggle(); },
        });
    }
</script>

<script type="text/javascript">
    $(document).ready(function () {
        $("#mydatatable").tableHeadFixer({ "head": true, "top": 1 });
        switchViewEdit();

        $('.chkStatus').click(function () {
            var roleId = $(this).attr('roleId');
            var featureId = $(this).attr('featureId');
            var parentFeatureId = $(this).attr('parentFeatureId');
            var status = $(this).prop("checked");

            var url = '@Url.Action("SaveAdminRights", "Feature")?RoleId=' + roleId + '&FeatureId='+featureId+'&Status='+status;
            $.ajax({
                url: url,
                type: "POST",
                dataType: "json",
                global: false,
                success: function (data) {
                    if (data.StatusCode == "1") {
                        $("." + roleId + '_' + featureId).toggleClass('displayNone');
						if (parentFeatureId === undefined)
						{/*parent clicked*/
							if (status == false) {/*uncheck all childs*/
								$(".chk_" + roleId + '_' + featureId).each(function (i, obj) {
									if ($(obj).prop("checked") == true) {
										$(obj).prop('checked', false);
										var cfeatureId = $(obj).attr('featureid');
										$("." + roleId + '_' + cfeatureId).toggleClass('displayNone');
									};
								});
							}
							else {/*check all childs*/
								$(".chk_" + roleId + '_' + featureId).each(function (i, obj) {
									if ($(obj).prop("checked") == false) {
										$(obj).prop('checked', true);
										var cfeatureId = $(obj).attr('featureid');
										$("." + roleId + '_' + cfeatureId).toggleClass('displayNone');
									};
								});
							}
						}
						else
						{/*child clicked*/
							if (status == true)/*child checked*/
							{
								var parentCheckbox = $("#" + roleId + '_' + parentFeatureId);
								if ($(parentCheckbox).prop("checked") == false)
								{
									//check parent because child is checked, record saved by proc
									$(parentCheckbox).prop('checked', true);
									$("." + roleId + '_' + parentFeatureId).toggleClass('displayNone');
								}
							}
							else if (status == false)/*child unchecked*/
							{
								var checkedChilds = $('input.chk_' + roleId + '_' + parentFeatureId + ':checked').length;
								if (checkedChilds == 0) /*unchecked all childs*/ /*uncheck parent*/
								{
									var parentCheckbox = $("#" + roleId + '_' + parentFeatureId);
									$(parentCheckbox).prop('checked', false);
									$("." + roleId + '_' + parentFeatureId).toggleClass('displayNone');
								}
							}
						}
					}
                    else {
                        showWarningMsg(data.msg);
                    }
                },
                error: function (data) {
                }
            });
        });
    });
</script>
